[Problem] Please write C program according to the following condition

There are diverse rectangles in given 1000 x 1000 arrays. As you can see in <Figure 1>, the serial “1” displayed as yellow cell is the pattern of rectangle. The minimum size of rectangle in <Figure 1> is 3 x 3 displayed as green cell.
There should be at least one of ‘0’ inside the rectangle. 
But, in this array, there exists unclosed shape or straight line pattern also.
Please write a program which returns the number of complete rectangles in array except unclosed shape or straight line.
(The initial value of array is ‘0’, and the patterns are represented a series of ‘1’. They are not overlapped or included each other.)

0	0	0	0	0	0	0	0	1	1	1	1	0	0	0
0	1	1	1	1	1	1	0	1	0	0	1	0	1	0
0	1	0	0	0	0	1	0	1	0	0	1	0	1	0
0	1	0	0	0	0	1	0	1	0	0	1	0	1	0
0	1	0	0	0	0	1	0	1	0	0	0	0	1	0
0	1	0	0	0	0	1	0	1	0	0	0	0	1	0
0	1	0	0	0	0	1	0	1	0	0	1	0	1	0
0	1	1	1	1	1	1	0	1	0	0	1	0	1	0
0	0	0	0	0	0	0	0	1	1	1	1	0	0	0
0	0	1	1	1	1	0	0	0	0	0	0	0	0	0
0	0	1	0	0	1	0	0	1	1	1	0	1	1	0
0	0	1	1	1	1	0	0	1	0	1	0	0	0	0
0	0	0	0	0	0	0	0	1	1	1	0	0	0	0
<Figure 1> the pattern of rectangle

As a side note, the patterns in below <Figure 2> are visualized generated by main.cpp.  There are mixed whole rectangles and unclosed shape. With the provided and enlarged picture, you can find the disconnected line in the middle of pattern. 

 
<Figure 2> the actual date generated by test case
 
[Attachment 1 – single_id.cpp]

// DO NOT INCLUDE ANY FILES

#define SIZE 1000


int run_test(const char map[SIZE][SIZE])
{
         // WRITE YOUR CODES HERE

	return 0; // the number of rectangle
}


[Attachement 2 – main.cpp]

#include <stdio.h>
#include <stdlib.h>


#define SIZE 1000
#define RAND 1000


static char map[10][SIZE][SIZE];


int run_test(const char map[SIZE][SIZE]);


void build_map(void)
{
       for (int c = 0; c < 10; c++)
       {
             for (int x = 0; x < SIZE; x++) for (int y = 0; y < SIZE; y++) map[c][x][y] = 0;

             for (int y = 0; y < SIZE; y += 100)
             {
                    for (int x = 0; x < SIZE; x += 100)
                    {
                           int rx = x + (rand() % 10);
                           int ry = y + (rand() % 10);

                           int w =  (rand() % 80) + 2;
                           int h =  (rand() % 80) + 2;

                           for (int cy = ry; cy <= ry + h; cy++)
                           {
                                 if ((rand() % RAND) != 5) map[c][rx][cy] = 1;
                                  if ((rand() % RAND) != 5) map[c][rx+w][cy] = 1;
                           }
                           for (int cx = rx; cx <= rx + w; cx++)
                           {
                                 if ((rand() % RAND) != 5) map[c][cx][ry] = 1;
                                 if ((rand() % RAND) != 5) map[c][cx][ry+h] = 1;
                           }

                    }
             }
       }
}


void main(void)
{
       build_map();

       for (int count = 0; count < 10; count++)
             printf("%d\n", run_test(map[count]));
}


